{"version":3,"sources":["util/graphql/post.js","components/LikeButton.js","components/PostButton.js","components/Post.js","components/ProfileInfo.js","components/AddPost.js","pages/Home.js","util/graphql/user.js","pages/Register.js","pages/Login.js","actions/index.js","actions/constants.js","components/AddComment.js","components/Comments.js","pages/PostInfo.js","reducers/userAuth.js","reducers/index.js","pages/Profile.js","components/NavBar.js","App.js","ApolloProvider.js","index.js"],"names":["GET_POSTS","gql","CREATE_POST","GET_POST","LIKE_POST","CREATE_COMMENT","LikeButton","likeCount","id","likes","user","useSelector","state","userData","useState","liked","setLiked","useEffect","find","item","userName","useMutation","variables","postId","likePost","handleClick","e","btn","Button","color","onClick","Icon","name","basic","as","Link","to","labelPosition","Label","pointing","PostButton","data","commentCount","Group","fluid","style","maxWidth","margin","display","Post","props","body","createdAt","Grid","Row","Card","width","marginBottom","Content","Image","floated","avatar","size","src","Header","Meta","moment","fromNow","Description","fontSize","extra","children","ProfileInfo","textAlign","padding","circular","List","Item","icon","content","href","AddPost","setBody","errors","setErrors","onError","err","graphQLErrors","message","update","proxy","post","createPost","readQuery","query","getPosts","writeQuery","callPost","Segment","Form","onSubmit","preventDefault","TextArea","label","placeholder","rows","value","onChange","target","error","backgroundColor","Home","useQuery","loading","posts","centered","className","Column","only","computer","mobile","tablet","map","key","USER_LOGIN","REGISTER_USER","Register","email","password","confirmPassword","values","setValues","result","console","log","localStorage","setItem","login","token","history","push","extensions","exception","registerUser","Container","text","Message","header","noValidate","widths","Input","required","type","primary","Login","dispatch","useDispatch","_","payload","loginUser","AddComment","setValue","insertComment","action","Comments","dataList","Comment","dividing","Avatar","Author","Metadata","Text","PostInfo","match","params","getPost","comments","initalState","getItem","decodedToken","jwt","decode","exp","Date","now","removeItem","userAuth","rootReducer","combineReducers","Profile","Divider","inline","flexDirection","alignSelf","disabled","Field","control","NavBar","Menu","secondary","position","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","component","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProivder","document","getElementById"],"mappings":"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","file":"static/js/main.dec5514f.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const GET_POSTS = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      body\r\n      userName\r\n      createdAt\r\n      likeCount\r\n      commentCount\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_POST = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      userName\r\n      createdAt\r\n      likeCount\r\n      commentCount\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_POST = gql`\r\n  query getPost($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      userName\r\n      createdAt\r\n      comments {\r\n        id\r\n        body\r\n        userName\r\n        createdAt\r\n      }\r\n      likeCount\r\n      commentCount\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE_POST = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      userName\r\n      createdAt\r\n      likeCount\r\n      commentCount\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n      comments {\r\n        id\r\n        body\r\n        userName\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { LIKE_POST } from \"../util/graphql/post\";\r\nimport { Button, Icon, Label } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst LikeButton = ({ likeCount, id, likes }) => {\r\n  const user = useSelector(state => state.userData);\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find(item => item.userName === user.userName)) {\r\n      setLiked(true);\r\n    } else {\r\n      setLiked(false);\r\n    }\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST, { variables: { postId: id } });\r\n  const handleClick = e => {\r\n    likePost(id);\r\n  };\r\n\r\n  const btn = user ? (\r\n    liked ? (\r\n      <Button color=\"red\" onClick={handleClick}>\r\n        <Icon name=\"like\" />\r\n        Like\r\n      </Button>\r\n    ) : (\r\n      <Button color=\"red\" basic onClick={handleClick}>\r\n        <Icon name=\"like\" />\r\n        Like\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button color=\"red\" as={Link} basic to=\"/login\">\r\n      <Icon name=\"like\" />\r\n      Like\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\">\r\n      {btn}\r\n      <Label basic color=\"red\" pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","import React from \"react\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport { Button, Icon, Label } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PostButton = ({\r\n  data: { id, likeCount, commentCount, userName, likes }\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Button.Group\r\n        fluid\r\n        style={{ maxWidth: \"80%\", margin: \"auto\", display: \"flex\" }}\r\n      >\r\n        <LikeButton\r\n          likeCount={likeCount}\r\n          id={id}\r\n          userName={userName}\r\n          likes={likes}\r\n        />\r\n        <Button labelPosition=\"right\" as={Link} to={`/post/${id}`}>\r\n          <Button basic color=\"blue\">\r\n            <Icon name=\"comments\" />\r\n            Comment\r\n          </Button>\r\n          <Label basic color=\"blue\" pointing=\"left\">\r\n            {commentCount}\r\n          </Label>\r\n        </Button>\r\n      </Button.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostButton;\r\n","import React from \"react\";\r\nimport { Card, Image, Grid } from \"semantic-ui-react\";\r\nimport PostButton from \"./PostButton\";\r\nimport moment from \"moment\";\r\n\r\nconst Post = props => {\r\n  const { body, userName, createdAt } = props.data;\r\n  return (\r\n    <Grid.Row>\r\n      <Card fluid style={{ width: \"100%\", marginBottom: \"1rem\" }}>\r\n        <Card.Content>\r\n          <Image\r\n            floated=\"left\"\r\n            avatar\r\n            size=\"massive\"\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1wJ90xBHS5VQEdYGHqdyZKpfbCnU2sl_5jFxSlJtOuodsCoVo\"\r\n          />\r\n          <Card.Header>John Doe</Card.Header>\r\n          <Card.Meta>@{userName}</Card.Meta>\r\n          <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n          <Card.Description style={{ fontSize: \"1.18rem\" }}>\r\n            {body}\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <PostButton data={props.data} />\r\n        </Card.Content>\r\n        {props.children}\r\n      </Card>\r\n    </Grid.Row>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Card, Image, List } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ProfileInfo = () => {\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Content>\r\n          <Card.Header textAlign=\"center\">\r\n            <Image\r\n              as={Link}\r\n              to=\"/profile\"\r\n              style={{ padding: \"1rem\" }}\r\n              size=\"small\"\r\n              circular\r\n              src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1wJ90xBHS5VQEdYGHqdyZKpfbCnU2sl_5jFxSlJtOuodsCoVo\"\r\n            />\r\n          </Card.Header>\r\n          <Card.Header textAlign=\"center\">John Doe</Card.Header>\r\n\r\n          <Card.Meta textAlign=\"center\">\r\n            <span>@username</span>\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\r\n            ad minim veniam.\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <List>\r\n            <List.Item icon=\"marker\" content=\"Miami, FL\" />\r\n            <List.Item\r\n              icon=\"mail\"\r\n              content={<a href=\"mailto:test@test.com\">johnDoe@test.com</a>}\r\n            />\r\n          </List>\r\n        </Card.Content>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Segment, Button } from \"semantic-ui-react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { CREATE_POST, GET_POSTS } from \"../util/graphql/post\";\r\n\r\nconst AddPost = () => {\r\n  const [body, setBody] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n\r\n  const [callPost] = useMutation(CREATE_POST, {\r\n    variables: { body },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].message);\r\n    },\r\n    update(\r\n      proxy,\r\n      {\r\n        data: { createPost: post }\r\n      }\r\n    ) {\r\n      try {\r\n        const data = proxy.readQuery({ query: GET_POSTS });\r\n        data.getPosts = [post, ...data.getPosts];\r\n        proxy.writeQuery({ query: GET_POSTS, data });\r\n      } catch (err) {\r\n        // Display error on page\r\n        setErrors(\"Unable to add Post\");\r\n      }\r\n    }\r\n  });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    callPost();\r\n    setBody(\"\");\r\n  };\r\n\r\n  const handleChange = e => setBody(e.target.value);\r\n\r\n  return (\r\n    <Segment style={{ marginBottom: \"1rem\" }}>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.TextArea\r\n          label=\"Create Post\"\r\n          placeholder=\"Post...\"\r\n          rows={2}\r\n          value={body}\r\n          onChange={handleChange}\r\n          error={errors ? errors : false}\r\n        />\r\n        <Button\r\n          style={{ backgroundColor: \"#4d9dd9\", color: \"white\" }}\r\n          name=\"body\"\r\n        >\r\n          {\" \"}\r\n          Add Post\r\n        </Button>\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import React from \"react\";\r\nimport Post from \"../components/Post\";\r\nimport ProfileInfo from \"../components/ProfileInfo\";\r\nimport AddPost from \"../components/AddPost\";\r\nimport { GET_POSTS } from \"../util/graphql/post\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Home = () => {\r\n  const user = useSelector(state => state.userData);\r\n  const {\r\n    loading,\r\n    data: { getPosts: posts }\r\n  } = useQuery(GET_POSTS);\r\n\r\n  return (\r\n    <div>\r\n      <Grid centered className={loading ? \"loading\" : \"\"}>\r\n        <Grid.Row>\r\n          <Grid.Column only=\"computer\" computer={5}>\r\n            <ProfileInfo />\r\n          </Grid.Column>\r\n          <Grid.Column mobile={16} tablet={12} computer={7}>\r\n            <Grid.Row>{user && <AddPost />}</Grid.Row>\r\n            {posts && posts.map(item => <Post data={item} key={item.id} />)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const USER_LOGIN = gql`\r\n  mutation login($userName: String!, $password: String!) {\r\n    login(userName: $userName, password: $password) {\r\n      id\r\n      token\r\n      userName\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REGISTER_USER = gql`\r\n  mutation register(\r\n    $userName: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        userName: $userName\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      token\r\n      userName\r\n      email\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Segment,\r\n  Container,\r\n  Button,\r\n  Icon,\r\n  Message\r\n} from \"semantic-ui-react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { REGISTER_USER } from \"../util/graphql/user\";\r\n\r\nconst Register = props => {\r\n  const [errors, setErrors] = useState({});\r\n  const [values, setValues] = useState({\r\n    userName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\"\r\n  });\r\n\r\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(proxy, result) {\r\n      console.log(result, \"result\");\r\n      // Store user Token\r\n      localStorage.setItem(\"token\", result.data.login.token);\r\n      props.history.push(\"/\");\r\n    },\r\n    variables: values,\r\n    onError(err) {\r\n      if (err.graphQLErrors[0].extensions.exception.errors) {\r\n        setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n      }\r\n    }\r\n  });\r\n\r\n  const onChange = e => {\r\n    setValues({ ...values, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    registerUser();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container text>\r\n        <Segment>\r\n          <div\r\n            style={{ textAlign: \"center\", padding: \"1rem\", fontSize: \"2rem\" }}\r\n          >\r\n            <Icon name=\"user\" />\r\n            Register\r\n          </div>\r\n          {errors.message ? (\r\n            <Message error header=\"Invalid Username\" content={errors.message} />\r\n          ) : null}\r\n          <Form\r\n            onSubmit={onSubmit}\r\n            noValidate\r\n            className={loading ? \"loading\" : \"\"}\r\n          >\r\n            {/* <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"First name\"\r\n                placeholder=\"First name\"\r\n                required\r\n                // Include error if error\r\n                // error=\"First Name Required\"\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                label=\"Last name\"\r\n                placeholder=\"Last name\"\r\n                required\r\n              />\r\n            </Form.Group> */}\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"Username\"\r\n                name=\"userName\"\r\n                onChange={onChange}\r\n                value={values.userName}\r\n                placeholder=\"Enter Username\"\r\n                error={errors.userName && errors.userName}\r\n                required\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                placeholder=\"Email Address\"\r\n                onChange={onChange}\r\n                value={values.email}\r\n                error={errors.email && errors.email}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={onChange}\r\n                error={errors.password && errors.password}\r\n                required\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                label=\"Confrim Password\"\r\n                placeholder=\"Confirm Password\"\r\n                onChange={onChange}\r\n                error={errors.confirmPassword && errors.confirmPassword}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            {/* <Form.Checkbox\r\n              required\r\n              label=\"I agree to the Terms and Conditions\"\r\n            /> */}\r\n            <Button\r\n              primary\r\n              fluid\r\n              style={{ maxWidth: \"50%\", margin: \"auto\" }}\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Segment, Button, Icon, Message } from \"semantic-ui-react\";\r\n\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginUser as loggingIn } from \"../actions\";\r\nimport { USER_LOGIN } from \"../util/graphql/user\";\r\n\r\nconst Login = props => {\r\n  const [errors, setErrors] = useState({});\r\n  const [values, setValues] = useState({\r\n    userName: \"\",\r\n    password: \"\"\r\n  });\r\n  // grab user from redux const userData = useSelector(data => console.log(data));\r\n  // Also import UseSelector\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [loginUser, { loading }] = useMutation(USER_LOGIN, {\r\n    update(\r\n      _,\r\n      {\r\n        data: { login: data }\r\n      }\r\n    ) {\r\n      dispatch(loggingIn(data));\r\n      props.history.push(\"/\");\r\n    },\r\n    variables: values,\r\n    onError(err) {\r\n      if (err.graphQLErrors[0].extensions.exception.errors) {\r\n        setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n      }\r\n    }\r\n  });\r\n\r\n  const onChange = e => {\r\n    setValues({ ...values, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    loginUser();\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\r\n      <Segment>\r\n        <div style={{ textAlign: \"center\", padding: \"1rem\", fontSize: \"2rem\" }}>\r\n          <Icon name=\"user\" />\r\n          Login\r\n        </div>\r\n        {errors.message ? (\r\n          <Message error header=\"Error\" content={errors.message} />\r\n        ) : null}\r\n\r\n        <Form\r\n          onSubmit={onSubmit}\r\n          className={loading ? \"loading\" : \"\"}\r\n          noValidate\r\n        >\r\n          <Form.Input\r\n            fluid\r\n            name=\"userName\"\r\n            label=\"Username\"\r\n            placeholder=\"Enter Username\"\r\n            onChange={onChange}\r\n            error={errors.userName && errors.userName}\r\n            required\r\n          />\r\n          <Form.Input\r\n            fluid\r\n            type=\"password\"\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            placeholder=\"Password\"\r\n            error={errors.password && errors.password}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n          <Button\r\n            primary\r\n            fluid\r\n            style={{ maxWidth: \"50%\", margin: \"auto\" }}\r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n        </Form>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { LOGIN_USER, LOGOUT_USER } from \"./constants\";\r\n\r\nexport const loginUser = userData => {\r\n  localStorage.setItem(\"token\", userData.token);\r\n  return {\r\n    type: LOGIN_USER,\r\n    payload: userData\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem(\"token\");\r\n  return { type: LOGOUT_USER };\r\n};\r\n","export const LOGIN_USER = \"LOGIN_USER\";\r\nexport const LOGOUT_USER = \"LOGOUT_USER\";\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { CREATE_COMMENT } from \"../util/graphql/post\";\r\n\r\nconst AddComment = ({ id }) => {\r\n  console.log(id);\r\n  const [value, setValue] = useState(\"\");\r\n  const [insertComment, { data }] = useMutation(CREATE_COMMENT, {\r\n    variables: { postId: id, body: value },\r\n    onError: err => console.log(err.graphQLErrors)\r\n  });\r\n\r\n  console.log(data);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    insertComment();\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleChange = e => setValue(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          label=\"Add Comment\"\r\n          action=\"submit\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddComment;\r\n","import React from \"react\";\r\nimport { Comment, Header } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport AddComment from \"../components/AddComment\";\r\n\r\nconst Comments = props => {\r\n  const dataList = props.data;\r\n\r\n  // dataList <= 0 ? null :\r\n  const list = (\r\n    <div style={{ padding: \" 1rem 2rem\" }}>\r\n      <Comment.Group>\r\n        <Header as=\"h3\" dividing>\r\n          Comments\r\n        </Header>\r\n        <AddComment id={props.postId} />\r\n        {dataList.map(item => (\r\n          <Comment key={item.id}>\r\n            {/* Later add userImg url to comments */}\r\n            <Comment.Avatar src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQFsBGYX4aIjM3ykjPaz7Q5AQx7Kldk_rfc_EGKpWGtYyeadVSycw\" />\r\n            <Comment.Content>\r\n              <Comment.Author as=\"span\">{item.userName}</Comment.Author>\r\n              <Comment.Metadata>\r\n                <div>{moment(item.createdAt).fromNow()}</div>\r\n              </Comment.Metadata>\r\n              <Comment.Text>{item.body}</Comment.Text>\r\n            </Comment.Content>\r\n          </Comment>\r\n        ))}\r\n      </Comment.Group>\r\n    </div>\r\n  );\r\n\r\n  return list;\r\n};\r\n\r\nexport default Comments;\r\n","import React from \"react\";\r\nimport Post from \"../components/Post\";\r\nimport Comments from \"../components/Comments\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { GET_POST } from \"../util/graphql/post\";\r\n\r\nconst PostInfo = props => {\r\n  const {\r\n    // loading,\r\n    data: { getPost: post }\r\n  } = useQuery(GET_POST, {\r\n    variables: { postId: props.match.params.id }\r\n  });\r\n\r\n  //// Create a wireframe for loading...\r\n  return (\r\n    <div style={{ maxWidth: \"600px\", margin: \"auto\" }}>\r\n      {post && (\r\n        <Post data={post}>\r\n          <Comments data={post.comments} postId={post.id} />\r\n        </Post>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostInfo;\r\n","import { LOGIN_USER, LOGOUT_USER } from \"../actions/constants\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nlet initalState = null;\r\n\r\nif (localStorage.getItem(\"token\")) {\r\n  const decodedToken = jwt.decode(localStorage.getItem(\"token\"));\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem(\"token\");\r\n  } else {\r\n    initalState = decodedToken;\r\n  }\r\n}\r\n\r\nconst userAuth = (state = initalState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      state = action.payload;\r\n      return state;\r\n    case LOGOUT_USER:\r\n      state = null;\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userAuth;\r\n","import { combineReducers } from \"redux\";\r\nimport userAuth from \"./userAuth\";\r\n\r\nconst rootReducer = combineReducers({\r\n  userData: userAuth\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Segment,\r\n  Image,\r\n  Form,\r\n  Divider,\r\n  TextArea,\r\n  Button\r\n} from \"semantic-ui-react\";\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <div>\r\n      <Grid centered>\r\n        <Grid.Column width={12}>\r\n          <Segment>\r\n            <h4>Account Details</h4>\r\n            <Divider />\r\n            <div style={{ display: \"flex\", padding: \".5rem\" }}>\r\n              <Image\r\n                inline\r\n                avatar\r\n                size=\"tiny\"\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1wJ90xBHS5VQEdYGHqdyZKpfbCnU2sl_5jFxSlJtOuodsCoVo\"\r\n              />\r\n              <div\r\n                style={{\r\n                  flexDirection: \"column\",\r\n                  alignSelf: \"center\",\r\n                  padding: \".5rem 1rem\"\r\n                }}\r\n              >\r\n                <h3 style={{ margin: 0 }}>John Doe</h3>\r\n                <p>change Avatar</p>\r\n              </div>\r\n            </div>\r\n            <Divider />\r\n            <h4>Personal Information</h4>\r\n            <Form>\r\n              <Form.Group widths=\"equal\">\r\n                <Form.Input fluid label=\"First Name\" />\r\n                <Form.Input fluid label=\"Last Name\" />\r\n              </Form.Group>\r\n              <Form.Group widths=\"equal\">\r\n                <Form.Input fluid label=\"City\" />\r\n                <Form.Input fluid label=\"Email\" disabled />\r\n              </Form.Group>\r\n              <Form.Field control={TextArea} label=\"Bio\" />\r\n              <Button primary>Update</Button>\r\n            </Form>\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { logoutUser } from \"../actions\";\r\n\r\nconst NavBar = () => {\r\n  const user = useSelector(state => state.userData);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logoutUser());\r\n  };\r\n\r\n  const nav = user ? (\r\n    <div style={{ marginBottom: \"2rem\" }}>\r\n      <Menu pointing secondary>\r\n        <Menu.Item header name=\"Social App\" as={Link} to=\"/\" />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            name={user.userName}\r\n            as={Link}\r\n            to={`/profile/${user.id}`}\r\n            // active={activeItem === \"logout\"}\r\n            // onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Item\r\n            name=\"Logout\"\r\n            as={Link}\r\n            to=\"/\"\r\n            // active={activeItem === \"logout\"}\r\n            onClick={handleLogout}\r\n          />\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </div>\r\n  ) : (\r\n    <div style={{ marginBottom: \"2rem\" }}>\r\n      <Menu pointing secondary>\r\n        <Menu.Item header name=\"Social App\" as={Link} to=\"/\" />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            name=\"Login\"\r\n            as={Link}\r\n            to=\"/login\"\r\n            // active={activeItem === \"logout\"}\r\n            // onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Item\r\n            name=\"Register\"\r\n            as={Link}\r\n            to=\"/register\"\r\n            // active={activeItem === \"logout\"}\r\n            // onClick={this.handleItemClick}\r\n          />\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </div>\r\n  );\r\n  return nav;\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport Register from \"./pages/Register\";\r\nimport Login from \"./pages/Login\";\r\nimport PostInfo from \"./pages/PostInfo\";\r\nimport reducers from \"./reducers\";\r\nimport Profile from \"./pages/Profile\";\r\n\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Container>\r\n          <NavBar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/post/:id\" component={PostInfo} />\r\n            <Route exact path=\"/profile/\" component={Profile} />\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { setContext } from \"apollo-link-context\";\r\n\r\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      Authorization: token ? `Bearer ${token}` : \"\"\r\n    }\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n","import ReactDOM from \"react-dom\";\nimport ApolloProivder from \"./ApolloProvider\";\n\nReactDOM.render(ApolloProivder, document.getElementById(\"root\"));\n"],"sourceRoot":""}